@page "/resume"
@rendermode InteractiveServer

@using SetoClass.DTOs.Resume
@using SetoClass.DTOs.ResumeSkill
@using SetoClass.DTOs.ResumeSocial

@inject HttpClient Http
@inject IJSRuntime JSRuntime

<LayoutComponentBase>
    <div class="admin-container">
        <div class="header-section">
            <h2 class="page-title">Resume Yönetimi</h2>
        </div>

        @if (isLoading)
        {
            <div class="loading-spinner">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Yükleniyor...</span>
                </div>
            </div>
        }
        else
        {
            <EditForm Model="@resume" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label class="form-label">Ad Soyad</label>
                    <InputText class="form-control" @bind-Value="resume.FullName" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Meslek</label>
                    <InputText class="form-control" @bind-Value="resume.Profession" />
                </div>

                <div class="mb-3">
                    <label class="form-label">E-posta</label>
                    <InputText class="form-control" @bind-Value="resume.Email" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Telefon</label>
                    <InputText class="form-control" @bind-Value="resume.PhoneNumber" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Eğitim</label>
                    <InputTextArea class="form-control" @bind-Value="resume.Education" style="height: 200px;" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Deneyim</label>
                    <InputTextArea class="form-control" @bind-Value="resume.Experience" style="height: 200px;" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Sertifikalar</label>
                    <InputTextArea class="form-control" @bind-Value="resume.Certification" style="height: 200px;" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Resim</label>
                    <InputFile OnChange="HandleImageUpload" accept="image/*" />
                    @if (!string.IsNullOrEmpty(resume.ResumeImage))
                    {
                        <img src="@resume.ResumeImage" alt="Resume Image" style="width: 100px; margin-top: 10px;" />
                    }
                </div>

                <div class="mb-3">
                    <label class="form-label">CV (PDF)</label>
                    <InputFile OnChange="HandlePdfUpload" accept=".pdf" />
                    @if (!string.IsNullOrEmpty(resume.CvUrl))
                    {
                        <a href="@resume.CvUrl" target="_blank">Mevcut CV'yi Görüntüle</a>
                    }
                </div>

                <h4>Yetenekler</h4>
                <table class="table custom-table">
                    <thead>
                        <tr>
                            <th>Yetenek Adı</th>
                            <th>Icon</th>
                            <th>İşlem</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var skill in resume.Skills)
                        {
                            <tr>
                                <td>
                                    <InputText class="form-control" @bind-Value="skill.SkillName" />
                                </td>
                                <td>
                                    <InputText class="form-control" @bind-Value="skill.SkillIcon" placeholder="örn. fa-star" />
                                </td>
                                <td>
                                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveSkill(skill)">Sil</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button type="button" class="btn btn-success mb-3" @onclick="AddSkill">Yeni Yetenek Ekle</button>

                <h4>Sosyal Medya</h4>
                <table class="table custom-table">
                    <thead>
                        <tr>
                            <th>Platform</th>
                            <th>URL</th>
                            <th>İşlem</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var social in resume.Socials)
                        {
                            <tr>
                                <td>
                                    <InputText class="form-control" @bind-Value="social.Platform" />
                                </td>
                                <td>
                                    <InputText class="form-control" @bind-Value="social.Url" placeholder="https://example.com" />
                                </td>
                                <td>
                                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveSocial(social)">Sil</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button type="button" class="btn btn-success mb-3" @onclick="AddSocial">Yeni Sosyal Platform Ekle</button>

                <div class="form-footer">
                    <button type="submit" class="btn btn-primary">Kaydet</button>
                </div>
            </EditForm>
        }
    </div>
</LayoutComponentBase>

@code {
    private ResumeReadDto resume = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadResume();
    }

    private async Task LoadResume()
    {
        isLoading = true;
        try
        {
            resume = await Http.GetFromJsonAsync<ResumeReadDto>("api/Resume") ?? new ResumeReadDto();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        var response = await Http.PutAsJsonAsync("api/Resume", resume);
        if (response.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Resume başarıyla güncellendi.");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Kaydetme sırasında hata oluştu.");
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            resume.ResumeImage = await UploadFile(file, "images");
        }
    }

    private async Task HandlePdfUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            resume.CvUrl = await UploadFile(file, "pdfs");
        }
    }

    private async Task<string> UploadFile(IBrowserFile file, string folder)
    {
        try
        {
            using var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024)); // 10 MB limit
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
            content.Add(fileContent, "file", file.Name);

            var response = await Http.PostAsync($"api/Resume/upload?folder={folder}", content);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<UploadResult>();
                return result?.Url ?? string.Empty;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"File upload failed: {ex.Message}");
        }
        return string.Empty;
    }

    private void AddSkill()
    {
        resume.Skills.Add(new ResumeSkillReadDto());
    }

    private void RemoveSkill(ResumeSkillReadDto skill)
    {
        resume.Skills.Remove(skill);
    }

    private void AddSocial()
    {
        resume.Socials.Add(new ResumeSocialReadDto());
    }

    private void RemoveSocial(ResumeSocialReadDto social)
    {
        resume.Socials.Remove(social);
    }

    public class UploadResult
    {
        public string? Url { get; set; }
    }
}
