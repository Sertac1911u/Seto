@page "/"
@page "/index"
@page "/home"

@using SetoClass.DTOs
@using System.Net.Http.Json
@using SetoClass.DTOs.Blog
@using SetoClass.DTOs.Game
@using SetoClass.DTOs.Video

@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>

<section class="last-blog section">
    <div class="container">
        <h2 class="section-title">Last Blogs</h2>
        <div class="last-blog-container">
            @if (blogs != null && blogs.Any())
            {
                <!-- Show the first blog as large -->
                var firstBlog = blogs.First();
                <article class="blog-item large-blog">
                    <div class="blog-image">
                        <img src="@firstBlog.ImageUrl" alt="Large Blog Image">
                    </div>
                    <div class="blog-content">
                        <h3 class="blog-title">
                            <a href="/blog/@firstBlog.Id">@firstBlog.Title</a>
                        </h3>
                        <p class="blog-meta">
                            by <span class="blog-author"><a href="">@firstBlog.Author</a></span> - @firstBlog.Date.ToString("MMMM dd, yyyy")
                        </p>
                        <p class="blog-excerpt">
                            @GetExcerpt(firstBlog.Content, 150)
                        </p>
                        <div class="blog-actions">
                            <span class="blog-likes"><i class="fas fa-heart"></i> @FormatNumber(firstBlog.Likes)</span>
                            <span class="blog-comments"><i class="fas fa-comments"></i> @FormatNumber(firstBlog.Comments)</span>
                            <span class="blog-saves"><i class="fas fa-bookmark"></i> @FormatNumber(firstBlog.Saves)</span>
                        </div>
                    </div>
                </article>

                <!-- Show the remaining blogs as small -->
                <div class="small-blogs">
                    @foreach (var item in blogs.Skip(1).Take(3))
                    {
                        <article class="blog-item small-blog">
                            <div class="blog-image">
                                <img src="@item.ImageUrl" alt="Small Blog Image">
                            </div>
                            <div class="blog-content">
                                <h3 class="blog-title">
                                    <a href="/blog/@item.Id">@item.Title</a>
                                </h3>
                                <p class="blog-meta">
                                    by <span class="blog-author"><a href="">@item.Author</a></span> - @item.Date.ToString("MMMM dd, yyyy")
                                </p>
                                <div class="blog-actions">
                                    <span class="blog-likes"><i class="fas fa-heart"></i> @FormatNumber(item.Likes)</span>
                                    <span class="blog-comments"><i class="fas fa-comments"></i> @FormatNumber(item.Comments)</span>
                                    <span class="blog-saves"><i class="fas fa-bookmark"></i> @FormatNumber(item.Saves)</span>
                                </div>
                            </div>
                        </article>
                    }
                </div>
            }
            else
            {
                <p>Loading...</p>
            }
        </div>
    </div>
</section>

<!-- Videos Section -->
<section class="videos-section section">
    <div class="container">
        <h2 class="section-title">Featured Videos</h2>
        <div class="horizontal-scroll-wrapper">
            <button class="scroll-btn left" aria-label="Scroll Left"><i class="fas fa-chevron-left"></i></button>
            <div class="videos-grid">
                @if (videos != null && videos.Any())
                {
                    foreach (var item in videos)
                    {
                        <article class="video-item">
                            <div class="video-thumbnail">
                                <a href="/video/@item.Id">
                                    <img src="@item.CoverImageUrl" alt="Video Thumbnail">
                                    <div class="video-hover">
                                        <i class="fas fa-play"></i>
                                        <span class="watch-now">Watch Now</span>
                                    </div>
                                </a>
                            </div>
                            <div class="video-content">
                                <h3 class="video-title"><a href="/video/@item.Id">@item.Title</a></h3>
                                <p class="video-meta">
                                    by <span class="video-author"><a href="">@item.Author</a></span> - @item.UploadDate
                                </p>
                                <div class="video-stats">
                                    <span class="video-views"><i class="fas fa-eye"></i> @FormatNumber(item.Views) Views</span>
                                    <span class="video-comments"><i class="fas fa-comments"></i> @FormatNumber(item.Comments) Comments</span>
                                </div>
                            </div>
                        </article>
                    }
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
            <button class="scroll-btn right" aria-label="Scroll Right"><i class="fas fa-chevron-right"></i></button>
        </div>
    </div>
</section>

<!-- Games Section -->
<section class="games-section section">
    <div class="container">
        <h2 class="section-title">Latest Games</h2>
        <div class="horizontal-scroll-wrapper">
            <button class="scroll-btn left" aria-label="Scroll Left"><i class="fas fa-chevron-left"></i></button>
            <div class="games-grid">
                @if (games != null && games.Any())
                {
                    foreach (var item in games)
                    {
                        <a href="/game/@item.Id">
                            <div class="game-card fade-in-up card-animate">
                                <img src="@item.CoverImageUrl" alt="Game Image">
                                <div class="game-title-overlay">@item.Title</div>
                                <div class="game-play-overlay">
                                    <i class="fas fa-play"></i>
                                </div>
                            </div>
                        </a>
                    }
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
            <button class="scroll-btn right" aria-label="Scroll Right"><i class="fas fa-chevron-right"></i></button>
        </div>
    </div>
</section>

@code {
    private List<BlogReadDto> blogs;
    private List<VideoReadDto> videos;
    private List<GameReadDto> games;

    protected override async Task OnInitializedAsync()
    {
        await LoadBlogs();
        await LoadVideos();
        await LoadGames();
    }

    private async Task LoadBlogs()
    {
        try
        {
            blogs = await Http.GetFromJsonAsync<List<BlogReadDto>>("api/Blogs/indexblogs");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching blogs: {ex.Message}");
            blogs = new List<BlogReadDto>();
        }
    }

    private async Task LoadVideos()
    {
        try
        {
            videos = await Http.GetFromJsonAsync<List<VideoReadDto>>("api/Videos/indexvideos");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching videos: {ex.Message}");
            videos = new List<VideoReadDto>();
        }
    }

    private async Task LoadGames()
    {
        try
        {
            games = await Http.GetFromJsonAsync<List<GameReadDto>>("api/Games/indexgames");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching games: {ex.Message}");
            games = new List<GameReadDto>();
        }
    }

    private string GetExcerpt(string content, int maxLength = 150)
    {
        return string.IsNullOrEmpty(content) ? string.Empty : (content.Length <= maxLength ? content : content.Substring(0, maxLength) + "...");
    }

    private string FormatNumber(int number)
    {
        return number switch
        {
            >= 1000 and < 1000000 => (number / 1000D).ToString("0.#") + "k",
            >= 1000000 => (number / 1000000D).ToString("0.#") + "M",
            _ => number.ToString()
        };
    }
}
