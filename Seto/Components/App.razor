@inject HttpClient Http
@using System.Net.Http.Json
@using SetoClass.Models
@using SetoClass.DTOs.Settings

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link href="/css/anim.css" rel="stylesheet" />
    <link href="/css/dark.css" rel="stylesheet" />
    <link href="/css/responsive.css" rel="stylesheet" />
    <link id="main-style" href="/css/style.css" rel="stylesheet" />
    <link href="/css/blogs.css" rel="stylesheet" />

    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

    @if (settings != null && !string.IsNullOrEmpty(settings.FaviconPath))
    {
        <link rel="icon" type="image/png" href="@settings.FaviconPath" />
    }
    else
    {
        <link rel="icon" type="image/png" href="default-favicon.png" />
    }
    <style>
        :root {
            --primary-color: @(settings?.PrimaryColor ?? "#000000");
            --secondary-color: @(settings?.SecondaryColor ?? "#ffffff");
        }
    </style>
    <HeadOutlet />
</head>
<body>
    <Routes />
</body>

</html>

@code {
    private SettingsReadDto settings;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("Fetching settings...");
            settings = await Http.GetFromJsonAsync<SettingsReadDto>("api/Settings");
            Console.WriteLine($"Settings fetched: {settings != null}");

            if (settings == null)
            {
                errorMessage = "Settings could not be fetched or are null.";
                Console.WriteLine(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching settings: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }
}
