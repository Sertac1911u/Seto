@page "/games"
@rendermode InteractiveServer

@using SetoClass.DTOs.Game
@using AutoMapper

@inject IMapper Mapper
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<LayoutComponentBase>
    <div class="admin-container">
        <div class="header-section">
            <h2 class="page-title">Game Yönetimi</h2>
            <button class="btn btn-primary" @onclick="ToggleAddGameForm">Yeni Game Ekle</button>
        </div>

        @if (isLoading)
        {
            <div class="loading-spinner">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Yükleniyor...</span>
                </div>
            </div>
        }
        else
        {
            @if (games.Any())
            {
                <div class="table-responsive">
                    <table class="table custom-table">
                        <thead>
                            <tr>
                                <th>Başlık</th>
                                <th>Yazar</th>
                                <th>Tür</th>
                                <th>Beğeniler</th>
                                <th>Kaydetmeler</th>
                                <th>İşlemler</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var game in games)
                            {
                                <tr>
                                    <td>@game.Title</td>
                                    <td>@game.GameAuthor</td>
                                    <td>@game.GameGenre</td>
                                    <td>@game.LikeCount</td>
                                    <td>@game.SaveCount</td>
                                    <td>
                                        <button class="btn btn-warning btn-sm" @onclick="() => EditGame(game)">Düzenle</button>
                                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteGame(game.Id)">Sil</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="empty-state">
                    <i class="fas fa-gamepad fa-2x"></i>
                    <p>Hiç oyun bulunmamaktadır.</p>
                </div>
            }

            @if (isAddFormVisible)
            {
                <div class="form-section">
                    <div class="form-header">
                        <h3 class="form-title"><i class="fas fa-plus"></i> Yeni Game Ekle</h3>
                        <button class="btn btn-secondary" @onclick="ToggleAddGameForm">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="form-content">
                        <EditForm Model="@newGame" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label class="form-label">Başlık</label>
                                <InputText class="form-control" @bind-Value="newGame.Title" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Açıklama</label>
                                <InputTextArea class="form-control" @bind-Value="newGame.Description" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Yazar</label>
                                <InputText class="form-control" @bind-Value="newGame.GameAuthor" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Tür</label>
                                <InputText class="form-control" @bind-Value="newGame.GameGenre" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Kapak Resmi</label>
                                <InputFile OnChange="HandleImageUpload" accept="image/*" />
                                @if (!string.IsNullOrEmpty(newGame.CoverImageUrl))
                                {
                                    <div class="image-preview">
                                        <img src="@newGame.CoverImageUrl" alt="Kapak Resmi" style="max-width: 100%; height: auto;" />
                                    </div>
                                }
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Oyun Dosyası</label>
                                <InputFile OnChange="HandleGameUpload" />
                                @if (!string.IsNullOrEmpty(newGame.GameUrl))
                                {
                                    <div class="file-preview">
                                        <p>Dosya Yüklendi: @newGame.GameUrl</p>
                                    </div>
                                }
                            </div>

                            <div class="form-footer">
                                <button type="submit" class="btn btn-success">Kaydet</button>
                                <button type="button" class="btn btn-secondary" @onclick="ToggleAddGameForm">İptal</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }

            @if (isEditFormVisible)
            {
                <div class="form-section">
                    <div class="form-header">
                        <h3 class="form-title"><i class="fas fa-edit"></i> Game Düzenle</h3>
                        <button class="btn btn-secondary" @onclick="CancelEdit">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="form-content">
                        <EditForm Model="@editGame" OnValidSubmit="HandleEditSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label class="form-label">Başlık</label>
                                <InputText class="form-control" @bind-Value="editGame.Title" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Açıklama</label>
                                <InputTextArea class="form-control" @bind-Value="editGame.Description" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Yazar</label>
                                <InputText class="form-control" @bind-Value="editGame.GameAuthor" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Tür</label>
                                <InputText class="form-control" @bind-Value="editGame.GameGenre" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Kapak Resmi</label>
                                <InputFile OnChange="HandleEditImageUpload" accept="image/*" />
                                @if (!string.IsNullOrEmpty(editGame.CoverImageUrl))
                                {
                                    <div class="image-preview">
                                        <img src="@editGame.CoverImageUrl" alt="Kapak Resmi" style="max-width: 100%; height: auto;" />
                                    </div>
                                }
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Oyun Dosyası</label>
                                <InputFile OnChange="HandleEditGameUpload" />
                                @if (!string.IsNullOrEmpty(editGame.GameUrl))
                                {
                                    <div class="file-preview">
                                        <p>Dosya Yüklendi: @editGame.GameUrl</p>
                                    </div>
                                }
                            </div>

                            <div class="form-footer">
                                <button type="submit" class="btn btn-success">Güncelle</button>
                                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">İptal</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }
        }
    </div>
</LayoutComponentBase>

@code {
    private List<GameReadDto> games = new List<GameReadDto>();
    private GameCreateDto newGame = new GameCreateDto();
    private GameReadDto editGame = new GameReadDto(); 
    private bool isLoading = true;
    private bool isAddFormVisible = false;
    private bool isEditFormVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadGames();
    }

    private async Task LoadGames()
    {
        isLoading = true;
        try
        {
            games = await Http.GetFromJsonAsync<List<GameReadDto>>("api/Games");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching games: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var content = new MultipartFormDataContent();
            content.Add(new StreamContent(file.OpenReadStream()), "file", file.Name);
            var response = await Http.PostAsync("api/Games/upload", content);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ImageUploadResult>();
                newGame.CoverImageUrl = result?.Url;
            }
        }
    }

    private async Task HandleGameUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var content = new MultipartFormDataContent();
            content.Add(new StreamContent(file.OpenReadStream()), "file", file.Name);
            var response = await Http.PostAsync("api/Games/upload", content);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ImageUploadResult>();
                newGame.GameUrl = result?.Url;
            }
        }
    }

    private async Task HandleEditImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var content = new MultipartFormDataContent();
            content.Add(new StreamContent(file.OpenReadStream()), "file", file.Name);
            var response = await Http.PostAsync("api/Games/upload", content);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ImageUploadResult>();
                editGame.CoverImageUrl = result?.Url;
            }
        }
    }

    private async Task HandleEditGameUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var content = new MultipartFormDataContent();
            content.Add(new StreamContent(file.OpenReadStream()), "file", file.Name);
            var response = await Http.PostAsync("api/Games/upload", content);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ImageUploadResult>();
                editGame.GameUrl = result?.Url;
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Games", newGame);

            if (response.IsSuccessStatusCode)
            {
                await LoadGames();
                isAddFormVisible = false;
                newGame = new GameCreateDto();
            }
            else
            {
                Console.WriteLine($"Error creating game: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception creating game: {ex.Message}");
        }
    }

    private async Task HandleValidEditSubmit()
    {
        var response = await Http.PutAsJsonAsync($"api/Games/{editGame.Id}", editGame); // Id kullanılıyor
        if (response.IsSuccessStatusCode)
        {
            await LoadGames();
            isEditFormVisible = false;
        }
    }

    private async Task HandleEditSubmit()
    {
        var response = await Http.PutAsJsonAsync($"api/Games/{editGame.Id}", editGame);
        if (response.IsSuccessStatusCode)
        {
            await LoadGames();
            CancelEdit();
        }
    }

    
    private void ToggleAddGameForm()
    {
        isAddFormVisible = !isAddFormVisible;
        if (isEditFormVisible)
        {
            isEditFormVisible = false;
        }
    }
    private void EditGame(GameReadDto game)
    {
        editGame = new GameReadDto
            {
                Id = game.Id,
                Title = game.Title,
                Description = game.Description,
                GameAuthor = game.GameAuthor,
                GameGenre = game.GameGenre,
                CoverImageUrl = game.CoverImageUrl,
                GameUrl = game.GameUrl,
                ReleaseDate = game.ReleaseDate,
                LikeCount = game.LikeCount,
                SaveCount = game.SaveCount
            };
        isEditFormVisible = true;
        if (isAddFormVisible)
        {
            isAddFormVisible = false;
        }
    }
    private void CancelEdit()
    {
        editGame = new GameReadDto();
        isEditFormVisible = false;
    }

    private async Task DeleteGame(int id)
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Bu oyunu silmek istediğinize emin misiniz?");
        if (confirm)
        {
            var response = await Http.DeleteAsync($"api/Games/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadGames();
            }
        }
    }

    public class ImageUploadResult
    {
        public string Url { get; set; }
    }
}
